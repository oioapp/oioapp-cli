#!/usr/bin/env node

var Program = require('commander');
var Promise = require('es6-promise').Promise;
var colors = require('colors');
var fs = require('fs');
var rimraf = require('rimraf');
var replace = require('replace');
var mkdirp = require('mkdirp');

Program
  .option('-d, --debug', 'output extra information for debugging')
  .parse(process.argv);

var args = Program.args;

if (!args.length) {
  console.log('must give a name after "new" (ex: reapp new myname)'.red);
  process.exit(1);
}

if (args.length > 2) {
  console.log('sorry, we don\'t support multiple names'.red);
  process.exit(1);
}

// allow custom repos
var repo = 'reapp';
var repoName = 'default';

if (args.length === 2) {
  var repoArg = args[1];
  if (repoArg.indexOf('/') !== -1) {
    repo = repoArg.split('/')[0];
    repoName = repoArg.split('/')[1];
  }
  else {
    repoName = repoArg;
  }
}

var name = args[0];

console.log();
console.log('Creating new reapp folder for: %s...'.green, name);

var dest = process.cwd() + '/' + name;

if (fs.existsSync(dest))
  console.log('Error! This directory already exists'.red);
else
  start();

function start() {
  makeFolder()
    .then(cloneRepo)
    .then(deleteGitFolder)
    .then(initGit)
    .then(replaceGivenNameInApp)
    .then(npmInstall)
    .then(npmDedupe)
    .then(finish)
    .catch(function(err) {
      console.log("\n", 'Error'.bold.red);
      console.log(err);
    });
}

function makeFolder() {
  return new Promise(function(resolve, reject) {
    mkdirp(dest, function(err) {
      if (err)
        reject(err);
      else
        resolve();
    });
  });
}

function getRepo() {
  return 'https://github.com/'+repo+'/starter-'+repoName;
}

function cloneRepo() {
  if (Program.debug)
    console.log('Looking for template in %s', getRepo());

  return promiseProcess(
    'git clone --depth=1 '+getRepo()+' '+ "'" + dest + "'"
  );
}

function deleteGitFolder() {
  return new Promise(function(resolve, reject) {
    rimraf(dest + '/.git', function(err, data) {
      if (err) return reject(err);
      resolve(data);
    })
  });
}

function initGit() {
  return promiseProcess('git init');
}

function replaceGivenNameInApp() {
  return new Promise(function(resolve, reject) {
    console.log('Inserting your name...'.green);
    replace({
      regex: 'REAPP_NAME',
      replacement: name,
      paths: [dest],
      recursive: true,
      silent: true
    });

    resolve();
  });
}

function npmInstall() {
  return promiseProcess('npm install');
}

function npmDedupe() {
  return promiseProcess('npm dedupe react');
}

function promiseProcess(cmd) {
  return new Promise(function(resolve, reject) {
    console.log('Running '+cmd+'...'.green);
    process.chdir(dest);

    var exec = require('child_process').exec, child;
    child = exec(cmd, handleChildProcess.bind(this, resolve, reject));
  });
}

function handleChildProcess(resolve, reject, error, stdout, stderr) {
  if (error)
    return reject(error);

  if (Program.debug)
    console.log(stderr);

  resolve();
}

function finish() {
  console.log('Done!'.green.bold);
  console.log();
}
